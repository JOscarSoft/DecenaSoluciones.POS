@page "/quotations"

@using DecenaSoluciones.POS.Shared.Dtos;
@using CurrieTechnologies.Razor.SweetAlert2;
@using DecenaSoluciones.POS.WebApp.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize]
@inject SweetAlertService Swal;
@inject ISaleService saleService;
@inject NavigationManager navegation;

<h3>Historico de cotizaciones</h3>

<div class="row" style="margin-top:50px">
    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Class="float-end" @onclick="() =>  navegation.NavigateTo(quotationsUrl)">Nueva cotización</Button>
    </div>
</div>

<div style="margin-top:25px">
    <Grid @ref="salesGrid" TItem="SalesViewModel"
          Class="table table-hover"
          HeaderRowCssClass="bg-dark text-white border-bottom-0 headerRow"
          Data="salesList"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="50"
          AllowSorting="true"
          AllowSelection="false"
          Responsive="true"
          PageSizeSelectorVisible="true"
          ItemsPerPageText="Registros por página"
          PageSizeSelectorItems="new int[] { 10, 20, 50, 100 }"
          PaginationItemsTextFormat="{0} - {1} de {2} productos"
          EmptyText="No se encontraron registros para mostrar"
          AllowRowClick="true"
          OnRowClick="OnRowClick">
        <GridColumn TItem="SalesViewModel" HeaderText="Código" PropertyName="Code" SortKeySelector="item => item.Code" HeaderTextAlignment="Alignment.Center">
            @context.Code
        </GridColumn>
        <GridColumn TItem="SalesViewModel" HeaderText="Cliente" PropertyName="CustomerName" SortKeySelector="item => item.CustomerName" HeaderTextAlignment="Alignment.Center">
            @context.CustomerName
        </GridColumn>
        <GridColumn TItem="SalesViewModel" HeaderText="Total" PropertyName="Total" SortKeySelector="item => item.Total" HeaderTextAlignment="Alignment.Center">
            @(context.Total != null ? context.Total?.ToString("N2") : "0.00")
        </GridColumn>
        <GridColumn TItem="SalesViewModel" HeaderText="Fecha" PropertyName="CreationDate" Sortable="true" SortKeySelector="item => item.CreationDate" SortDirection="SortDirection.Descending" IsDefaultSortColumn="true" HeaderTextAlignment="Alignment.Center">
            @context.CreationDate.ToString("dd/MM/yyyy")
        </GridColumn>
    </Grid>
</div>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }
    List<SalesViewModel> salesList = new List<SalesViewModel>();
    Grid<SalesViewModel> salesGrid = default!;
    string quotationsUrl = "/newsale";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService!.Show();
            var response = await saleService.GetQuotationsList();

            PreloadService!.Hide();
            if (response.Success)
            {
                salesList = response.Result ?? new List<SalesViewModel>();
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Se produjo un error al obtener las cotizaciones: " + response.Message,
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            PreloadService!.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Se produjo un error al obtener las cotizaciones: " + ex.Message,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private void OnRowClick(GridRowEventArgs<SalesViewModel> args)
    {
        navegation.NavigateTo($"{quotationsUrl}/{args.Item.Id}/1");
    }
}
