@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.Shared.Services;
@using CurrieTechnologies.Razor.SweetAlert2;

@inject SweetAlertService Swal;
@inject IProductService productService;

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<div class="col-md-4" style="margin-bottom:25px">
    <InputText class="form-control" @bind-Value="newCode" maxlength="15" @onkeydown="@EnterCode" placeholder="Buscar por código" @oninput="@(e => {newCode = e.Value!.ToString() ?? "";})"></InputText>
</div>
<EditForm Model="model" OnValidSubmit="OnValidSubmit" class="row g-3">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <table class="table">
        <thead>
            <tr class="bg-dark text-white border-bottom-0 headerRow">
                <th>Producto</th>
                <th>Stock</th>
                <th>Precio compra</th>
                <th>Precio venta</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var productStock in model)
            {
                <tr>
                    <td>
                        <AutoComplete @bind-Value="productStock.ProductDescription"
                                      TItem="ProductViewModel"
                                      DataProvider="ProductsDataProvider"
                                      PropertyName="Description"
                                      Placeholder="Ingresa un producto..."
                                      OnChanged="(ProductViewModel selected) => OnChangeProduct(selected, model.IndexOf(productStock))" />
                        <InputText hidden="hidden" @bind-Value="productStock.ProductCode" />
                        <ValidationMessage For="@(() => productStock.ProductCode)"></ValidationMessage>
                    </td>
                    <td>
                        <NumberInput TValue="int" @bind-Value="productStock.Quantity" />
                        <ValidationMessage For="@(() => productStock.Quantity)"></ValidationMessage>
                    </td>
                    <td>
                        <CurrencyInput TValue="decimal" Locale="en-US" class="form-control" @bind-Value="productStock.Cost"></CurrencyInput>
                        <ValidationMessage For="@(() => productStock.Cost)"></ValidationMessage>
                    </td>
                    <td>
                        <CurrencyInput TValue="decimal" Locale="en-US" class="form-control" @bind-Value="productStock.Price"></CurrencyInput>
                        <ValidationMessage For="@(() => productStock.Price)"></ValidationMessage>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="(() => removeProduct(model.IndexOf(productStock)))">
                            <Icon Name="IconName.Trash" />
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
        <button type="submit" Class="btn btn-primary">
            Guardar
        </button>
    </div>
</EditForm>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }

    [Parameter] public List<ProductViewModel> ProductList { get; set; } = new List<ProductViewModel>();
    [Parameter] public EventCallback<MouseEventArgs> OnClose { get; set; }

    List<UpdateInventory> model = new List<UpdateInventory>();
    List<ToastMessage> messages = new List<ToastMessage>();
    private void ShowMessage(string message) => messages.Add(CreateToastMessage(ToastType.Warning, message));

    string newCode = string.Empty;

    public void EnterCode(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            var newProduct = ProductList.FirstOrDefault(p => p.Code.ToUpper() == newCode.ToUpper());
            if (newProduct != null)
            {
                model.ElementAt(model.Count - 1).ProductCode = newProduct.Code;
                model.ElementAt(model.Count - 1).ProductDescription = newProduct.Description;
                model.ElementAt(model.Count - 1).Cost = newProduct.Cost;
                model.ElementAt(model.Count - 1).Price = newProduct.Price;
                model.Add(new UpdateInventory());
                return;
            }

            ShowMessage("Producto no encontrado");
        }
    }

    private async Task<AutoCompleteDataProviderResult<ProductViewModel>> ProductsDataProvider(AutoCompleteDataProviderRequest<ProductViewModel> request)
    {
        return await Task.FromResult(request.ApplyTo(ProductList.OrderBy(prod => prod.Description)));
    }

    protected override void OnInitialized()
    {
        model.Add(new UpdateInventory());
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private string validateStock()
    {
        var products = model.Where(p => !string.IsNullOrEmpty(p.ProductCode));
        if (!products.Any())
            return "Favor de ingresar al menos un producto.";

        if (products.Any(p => p.Cost <= 0))
            return "Uno de los productos ingresados no tiene precio de compra. Favor de validar.";

        if (products.Any(p => p.Price <= 0))
            return "Uno de los productos ingresados no tiene precio de venta. Favor de validar.";

        return string.Empty;
    }

    private async Task OnValidSubmit()
    {
        string validations = validateStock();

        if (string.IsNullOrEmpty(validations))
        {
            PreloadService!.Show();
            try
            {
                var response = await productService.UpdateInventary(model.Where(p => !string.IsNullOrEmpty(p.ProductCode)).ToList());
                PreloadService.Hide();
                if (response.Success)
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Stock actualizado",
                            Text = "El stock ha sido actualizado exitosamente",
                            Icon = SweetAlertIcon.Success
                        });
                    await OnClose.InvokeAsync();
                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = "Se produjo un error al actualizar el stock. " + response.Message,
                            Icon = SweetAlertIcon.Error
                        });
                }
            }
            catch (Exception ex)
            {
                PreloadService.Hide();
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Se produjo un error al procesar la petición: " + ex.Message,
                        Icon = SweetAlertIcon.Error
                    });

            }
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = validations,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private void removeProduct(int productIndex)
    {
        if (productIndex == model.Count - 1)
            return;

        model.RemoveAt(productIndex);
    }

    private void OnChangeProduct(ProductViewModel selected, int productIndex)
    {
        if (selected != null)
        {
            if (productIndex == model.Count - 1)
                model.Add(new UpdateInventory());

            model.ElementAt(productIndex).ProductCode = selected!.Code;
            model.ElementAt(productIndex).ProductDescription = selected!.Description;
            model.ElementAt(productIndex).Cost = selected!.Cost;
            model.ElementAt(productIndex).Price = selected!.Price;
            return;
        }

        model.ElementAt(productIndex).Cost = 0;
        model.ElementAt(productIndex).Price = 0;
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Aviso",
            Message = message,
        };
}
