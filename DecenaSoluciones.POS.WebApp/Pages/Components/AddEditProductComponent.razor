@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.Shared.Services;
@using DecenaSoluciones.POS.WebApp.Extensions;
@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Globalization;

@inject SweetAlertService Swal;
@inject IProductService productService;


<EditForm Model="newProduct" OnValidSubmit="OnValidSubmit" class="row g-3" Context="EditFormContext">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="col-md-4">
        <label class="form-label">Código:</label>
        <InputText class="form-control" @bind-Value="newProduct.Code" maxlength="15"></InputText>
        <ValidationMessage For="@(() => newProduct.Code)"></ValidationMessage>
    </div>
    <div class="col-md-8">
        <label class="form-label">Descripción:</label>
        <InputText class="form-control" @bind-Value="newProduct.Description"></InputText>
        <ValidationMessage For="@(() => newProduct.Description)"></ValidationMessage>
    </div>
    <div class="col-md-4">
        <label class="form-label">Precio de compra:</label>
        <RadzenNumeric TValue="decimal" class="form-control" Culture="@CultureInfo.CreateSpecificCulture("en-US")" Format="C2" ShowUpDown="false" @bind-Value=@newProduct.Cost />
        <ValidationMessage For="@(() => newProduct.Cost)"></ValidationMessage>
    </div>
    <div class="col-md-4">
        <label class="form-label">Precio de venta:</label>
        <RadzenNumeric TValue="decimal" class="form-control" Culture="@CultureInfo.CreateSpecificCulture("en-US")" Format="C2" ShowUpDown="false" @bind-Value=@newProduct.Price />
        <ValidationMessage For="@(() => newProduct.Price)"></ValidationMessage>
    </div>
    <div class="col-md-4">
        <label class="form-label">% ITBIS:</label>
        <NumberInput TValue="decimal" @bind-Value="newProduct.ITBIS" />
        <ValidationMessage For="@(() => newProduct.ITBIS)"></ValidationMessage>
    </div>
    <div class="col-md-4">
        <label class="form-label">Stock:</label>
        <NumberInput TValue="int" @bind-Value="newProduct.stock" />
        <ValidationMessage For="@(() => newProduct.stock)"></ValidationMessage>
    </div>
    <div class="col-md-4">
        <label class="form-label">Tiempo de garantía (Meses):</label>
        <NumberInput TValue="int?" @bind-Value="newProduct.WarrantyTime" />
        <ValidationMessage For="@(() => newProduct.WarrantyTime)"></ValidationMessage>
    </div>
    <div class="col-md-4">
        <label class="form-label">Periodo de mantenimientos (Meses):</label>
        <NumberInput TValue="int?" @bind-Value="newProduct.MaintenancePeriods" />
        <ValidationMessage For="@(() => newProduct.MaintenancePeriods)"></ValidationMessage>
    </div>
    <div class="col-md-4">
        <Switch @bind-Value="newProduct.Assignable" Label="Asignable a clientes" />
    </div>

    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
        <AuthorizeView Roles="admin, manager" Context="authContext">
            <button type="submit" Class="btn btn-primary">
                Guardar
            </button>
        </AuthorizeView>
        <AuthorizeView Roles="admin" Context="authContext">
            <Button Color="ButtonColor.Danger" @onclick="RemoveProduct" style="margin-right:15px">
                Eliminar
            </Button>
        </AuthorizeView>
    </div>
</EditForm>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }

    [Parameter] public ProductViewModel Product { get; set; } = new ProductViewModel();
    [Parameter] public EventCallback<MouseEventArgs> OnClose { get; set; }

    AddEditProduct newProduct = new AddEditProduct();

    protected override void OnInitialized()
    {
        if (Product.Id > 0)
            newProduct = new AddEditProduct(Product);
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private async Task OnValidSubmit()
    {
        PreloadService!.Show();
        try
        {
            if (Product.Id == 0)
            {
                var response = await productService.AddNewProduct(newProduct);
                PreloadService.Hide();
                if (response.Success)
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Exito",
                            Text = "Producto agregado exitosamente.",
                            Icon = SweetAlertIcon.Success
                        });

                    newProduct = new AddEditProduct();
                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = response.Message.HandleErrorMessage(),
                            Icon = SweetAlertIcon.Error
                        });
                }
            }
            else
            {
                var response = await productService.UpdateProduct(Product.Id, newProduct);
                PreloadService.Hide();
                if (response.Success)
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Exito",
                            Text = "Producto modificado exitosamente.",
                            Icon = SweetAlertIcon.Success
                        });

                    await OnClose.InvokeAsync();
                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = response.Message.HandleErrorMessage(),
                            Icon = SweetAlertIcon.Error
                        });
                }

            }

        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });

        }
    }

    private async Task RemoveProduct()
    {
        try
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Eliminar producto",
                    Text = "¿Esta seguro de eliminar el producto?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    CancelButtonText = "Cancelar"
                });

            if (result.IsConfirmed)
            {
                PreloadService!.Show();
                var response = await productService.RemoveProduct(Product.Id);
                PreloadService.Hide();
                if (response.Success)
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Eliminado",
                            Text = "Producto eliminado exitosamente",
                            Icon = SweetAlertIcon.Success
                        });
                    await OnClose.InvokeAsync();
                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = response.Message.HandleErrorMessage(),
                            Icon = SweetAlertIcon.Error
                        });
                }
            }
        }
        catch (Exception ex)
        {
            PreloadService!.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });

        }
    }
}
