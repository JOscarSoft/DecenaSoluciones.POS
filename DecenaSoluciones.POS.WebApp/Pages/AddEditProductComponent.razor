@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.WebApp.Services;
@using CurrieTechnologies.Razor.SweetAlert2;

@inject SweetAlertService Swal;
@inject IProductService productService;

<EditForm Model="product" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="mb-3">
        <label class="form-label">Código:</label>
        <InputText class="form-control" @bind-Value="product.Code"></InputText>
        <ValidationMessage For="@(() => product.Code)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Descripción:</label>
        <InputText class="form-control" @bind-Value="product.Description"></InputText>
        <ValidationMessage For="@(() => product.Description)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Precio de compra:</label>
        <CurrencyInput TValue="decimal" Locale="en-US" class="form-control" @bind-Value="product.Cost"></CurrencyInput>
        <ValidationMessage For="@(() => product.Cost)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Precio de venta:</label>
        <CurrencyInput TValue="decimal" Locale="en-US" class="form-control" @bind-Value="product.Price"></CurrencyInput>
        <ValidationMessage For="@(() => product.Price)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">% ITBIS:</label>
        <NumberInput TValue="decimal" @bind-Value="product.ITBIS" />
        <ValidationMessage For="@(() => product.ITBIS)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Stock:</label>
        <NumberInput TValue="int" @bind-Value="product.stock" />
        <ValidationMessage For="@(() => product.stock)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Periodo de mantenimientos (Meses):</label>
        <NumberInput TValue="int?" @bind-Value="product.MaintenancePeriods" />
        <ValidationMessage For="@(() => product.MaintenancePeriods)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label class="form-label">Tiempo de garantía (Meses):</label>
        <NumberInput TValue="int?" @bind-Value="product.WarrantyTime" />
        <ValidationMessage For="@(() => product.WarrantyTime)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <Switch @bind-Value="product.Assignable" Label="Asignable a clientes" />
    </div>

    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
    <button type="submit" Class="btn btn-primary">
        Guardar
    </button>

    @if (productId > 0)
    {
        <Button Color="ButtonColor.Danger" @onclick="RemoveProduct" style="margin-right:15px">
            Eliminar
        </Button>
        }
    </div>
</EditForm>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }

    [Parameter] public int productId { get; set; } = 0;
    [Parameter] public EventCallback<MouseEventArgs> OnClose { get; set; }

    AddEditProduct product = new AddEditProduct();

    protected override async Task OnInitializedAsync()
    {
        if (productId != 0)
        {
            PreloadService!.Show();
            var response = await productService.GetProductById(productId);
            PreloadService.Hide();
            if (!response.Success || response.Result == null)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "No se pudieron obtener los datos del producto.",
                        Icon = SweetAlertIcon.Error
                    });

                return;
            }

            product = new AddEditProduct(response.Result);
        }
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private async Task OnValidSubmit()
    {
        PreloadService!.Show();
        if (productId == 0)
        {
            var response = await productService.AddNewProduct(product);
            PreloadService.Hide();
            if (response.Success)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Exito",
                        Text = "Producto agregado exitosamente.",
                        Icon = SweetAlertIcon.Success
                    });

                product = new AddEditProduct();
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Se produjo un error al agrager el producto. " + response.Message,
                        Icon = SweetAlertIcon.Error
                    });                
            }
        }
        else
        {
            var response = await productService.UpdateProduct(productId, product);
            PreloadService.Hide();
            if (response.Success)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Exito",
                        Text = "Producto modificado exitosamente.",
                        Icon = SweetAlertIcon.Success
                    });

                await OnClose.InvokeAsync();
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Se produjo un error al modificar el producto. " + response.Message,
                        Icon = SweetAlertIcon.Error
                    });
            }
            
        }

    }


    private async Task RemoveProduct()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar producto",
                Text = "¿Esta seguro de eliminar el producto?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
            PreloadService!.Show();
            var response = await productService.RemoveProduct(productId);
            PreloadService.Hide();
            if (response.Success)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Eliminado",
                        Text = "Producto eliminado exitosamente",
                        Icon = SweetAlertIcon.Success
                    });
                await OnClose.InvokeAsync();
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Se produjo un error al eliminar el producto. " + response.Message,
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
    }
}
