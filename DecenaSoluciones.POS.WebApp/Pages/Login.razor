@page "/Login"
@layout LoginLayout

@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.WebApp.Extensions;
@using Microsoft.AspNetCore.Components.Authorization
@using DecenaSoluciones.POS.WebApp.Services;
@using CurrieTechnologies.Razor.SweetAlert2;

@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navManager
@inject SweetAlertService Swal;
@inject IAuthService authService;

<div class="row mt-5 text-center">

    <div class="col-lg-4 offset-lg-4 border" style="width:28%">

        <img src="/images/logo/Logo-Full.png" alt="logo" style="width:50%;margin-bottom:50px">

        <div class="mb-3">
            <input @bind="model.Username" class="form-control" placeholder="Usuario" style="width:75%;display: block;margin: 0 auto;" />
        </div>

        <div class="mb-3">
            <input type="password" @bind="model.Password" class="form-control" placeholder="Contraseña" style="width:75%;display: block;margin: 0 auto;" />
        </div>

        <div class="mb-3" style="margin-top:50px">
            <button @onclick="SubmitLogin" class="btn btn-lg btn-primary btn-block" style="width:75%">Login</button>
        </div>

    </div>

</div>



@code {
    [Inject] protected PreloadService? PreloadService { get; set; }
    private LoginViewModel model = new LoginViewModel();

    private async Task SubmitLogin()
    {
        PreloadService!.Show();
        try
        {
            var response = await authService.Login(model);
            PreloadService.Hide();
            if (response.Success)
            {
                var authExt = (AuthExtension)autenticacionProvider;
                await authExt.UpdateSessionState(response.Result!);

                navManager.NavigateTo("/");
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message,
                        Icon = SweetAlertIcon.Error
                    });
            }

        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Se produjo un error al procesar la petición: " + ex.Message,
                    Icon = SweetAlertIcon.Error
                });

        }
    }

}