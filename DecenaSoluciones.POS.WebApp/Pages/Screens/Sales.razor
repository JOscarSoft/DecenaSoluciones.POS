@page "/sales"

@using DecenaSoluciones.POS.Shared.Dtos;
@using CurrieTechnologies.Razor.SweetAlert2;
@using DecenaSoluciones.POS.WebApp.Pages.Components
@using DecenaSoluciones.POS.Shared.Services;
@using DecenaSoluciones.POS.Shared.Enums;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize]
@inject SweetAlertService Swal;
@inject ISaleService saleService;
@inject IReportService reportService;
@inject NavigationManager navegation;
@inject IJSRuntime JS

<h3>Historico de ventas</h3>

<Modal @ref="reportsModal" title="Generar reporte" UseStaticBackdrop="true" Size="ModalSize.Large">
    <BodyTemplate>
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">Tipo:</label>
                <select class="form-select" @onchange="ChangeReportType">
                    <option value="1" selected>Reporte de ventas</option>
                    <option value="2">Productos vendidos</option>
                    <option value="3">Reporte de ingresos y gastos</option>
                </select>
            </div>
            <div class="col-md-4">
                <label class="form-label">Desde:</label>
                <DateInput TValue="DateOnly" @bind-Value="@reportDateFrom" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Hasta:</label>
                <DateInput TValue="DateOnly" @bind-Value="@reportDateTo" />
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" @onclick="SubmitGenerateReport">Generar</Button>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cancelar</Button>
    </FooterTemplate>
</Modal>

<div class="row" style="margin-top:50px">
    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
        <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Class="float-end" @onclick="() =>  navegation.NavigateTo(salesUrl)">Nueva venta</Button>
        <AuthorizeView Roles="admin, manager">
            <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Dark" Class="float-end" @onclick="() => ShowReportsModal()">Generar reporte</Button>
        </AuthorizeView>
    </div>
</div>

<SaleListComponent salesDataProvider="SalesDataProvider" quotations="0"></SaleListComponent>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }
    GridResponse<SalesViewModel>? salesList = default!;
    private Modal reportsModal = default!;
    string salesUrl = "/newsale";
    private EnumReportType reportType = EnumReportType.Sales;
    private DateOnly reportDateFrom = DateOnly.FromDateTime(DateTime.Now.AddDays(-7));
    private DateOnly reportDateTo = DateOnly.FromDateTime(DateTime.Now);

    public async Task<GridDataProviderResult<SalesViewModel>> SalesDataProvider(GridDataProviderRequest<SalesViewModel> request)
    {
        try
        {
            if (salesList == null)
                PreloadService!.Show();

            string sortString = "CreationDate";
            string sortDirection = "desc";

            if (request.Sorting is not null && request.Sorting.Any())
            {
                // Note: Multi column sorting is not supported at this moment
                sortString = request.Sorting.FirstOrDefault()!.SortString;
                sortDirection = request.Sorting.FirstOrDefault()!.SortDirection == SortDirection.Descending ? "desc" : "asc";
            }

            var response = await saleService.GetFilteredSalesList(new GridRequest(){
                    PageNumber = request.PageNumber,
                    PageSize = request.PageSize,
                    SortColumn = sortString,
                    SortDirection = sortDirection,
                    Filters = request.Filters.Select(p => new ColumnFilter {
                        Field = p.PropertyName,
                        Operator = (DecenaSoluciones.POS.Shared.Enums.FilterOperator)(int)p.Operator, 
                        Value = p.Value }).ToList()
            });

            if (response.Success)
            {
                salesList = response.Result;
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage("Se produjo un error al obtener las ventas."),
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage("Se produjo un error al obtener las ventas."),
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            PreloadService!.Hide();
        }

        return await Task.FromResult(new GridDataProviderResult<SalesViewModel> { 
            Data = salesList?.Items ?? new List<SalesViewModel>(), 
            TotalCount = salesList?.TotalCount ?? 0
        });
    }

    private void ChangeReportType(ChangeEventArgs e)
    {
        if (e.Value?.ToString() != null)
        {
            reportType = (EnumReportType)int.Parse(e.Value!.ToString()!);
            return;
        }

        reportType = EnumReportType.Sales;
    }

    private async Task OnHideModalClick(MouseEventArgs e)
    {
        await reportsModal.HideAsync();
    }

    private async Task ShowReportsModal()
    {
        reportType = EnumReportType.Sales;
        await reportsModal.ShowAsync();
    }

    private async Task SubmitGenerateReport()
    {
        PreloadService!.Show();
        try
        {
            Stream response;
            if (reportType == EnumReportType.ExpenseAndIncome)
                response = await reportService.GenerateExpenseAndIncomeReport(reportDateFrom, reportDateTo);
            else
                response = await reportService.GenerateReport(reportDateFrom, reportDateTo, reportType);

            var fileName = reportType == EnumReportType.Sales ? "Reporte de ventas" :
                reportType == EnumReportType.ExpenseAndIncome ? "Reporte de ingresos y gastos" :
                "Ventas por productos";

            fileName = $"{fileName} {DateTime.Now.ToString("dd/MM/yyyy")}.xlsx";

            using var streamRef = new DotNetStreamReference(stream: response);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            PreloadService.Hide();
            await reportsModal.HideAsync();

            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Exito",
                    Text = "Reporte generado exitosamente.",
                    Icon = SweetAlertIcon.Success
                });
        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });

        }
    }
}
