@page "/products"

@using DecenaSoluciones.POS.Shared.Dtos;
@using CurrieTechnologies.Razor.SweetAlert2;
@using DecenaSoluciones.POS.WebApp.Extensions;
@using DecenaSoluciones.POS.Shared.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using DecenaSoluciones.POS.WebApp.Pages.Components;
@using System.Globalization;

@attribute [Authorize]
@inject SweetAlertService Swal;
@inject IProductService productService;
@inject IReportService reportService;
@inject IJSRuntime JS;

<h3>Productos</h3>

<Modal @ref="addEditProductModal" UseStaticBackdrop="true" Size="ModalSize.ExtraLarge" OnHidden="OnModalHiding" />

<div class="row" style="margin-top:50px">
    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">     
        <AuthorizeView Roles="admin, manager">
            <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Class="float-end" @onclick="() => ShowAddEditProductModal(null)">Agregar productos</Button>
            <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Dark" Class="float-end" @onclick="() => ShowStockUpdateModal()">Actualizar stock</Button>
            <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Dark" Class="float-end" @onclick="GenerateInventoryReport">Reporte de inventario</Button>
        </AuthorizeView>
    </div>
</div>

<div style="margin-top:25px">
    <Grid @ref="productsGrid" TItem="ProductViewModel"
          Class="table table-hover"
          HeaderRowCssClass="bg-dark text-white border-bottom-0 headerRow"
          Data="productList"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="50"
          AllowSorting="true"
          AllowSelection="false"
          Responsive="true"
          PageSizeSelectorVisible="true"
          ItemsPerPageText="Productos por página"
          PageSizeSelectorItems="new int[] { 10, 20, 50, 100 }"
          PaginationItemsTextFormat="{0} - {1} de {2} productos"
          EmptyText="No se encontraron registros para mostrar"
          AllowRowClick="true"
          OnRowClick="OnRowClick">

        <GridColumn TItem="ProductViewModel" HeaderText="Código" PropertyName="Code" SortKeySelector="item => item.Code" HeaderTextAlignment="Alignment.Center">
            @context.Code
        </GridColumn>
        <GridColumn TItem="ProductViewModel" HeaderText="Descripción" PropertyName="Description" SortKeySelector="item => item.Description" IsDefaultSortColumn="true" HeaderTextAlignment="Alignment.Center">
            @context.Description
        </GridColumn>
        <GridColumn TItem="ProductViewModel" HeaderText="Precio compra" PropertyName="Cost" SortKeySelector="item => item.Cost" HeaderTextAlignment="Alignment.Center">
            @context.Cost.ToString("C2", CultureInfo.CreateSpecificCulture("en-US"))
        </GridColumn>
        <GridColumn TItem="ProductViewModel" HeaderText="Precio venta" PropertyName="Price" SortKeySelector="item => item.Price" HeaderTextAlignment="Alignment.Center">
            @context.Price.ToString("C2", CultureInfo.CreateSpecificCulture("en-US"))
        </GridColumn>
        <GridColumn TItem="ProductViewModel" HeaderText="Stock" PropertyName="stock" Sortable="true" SortKeySelector="item => item.stock" Filterable="false" HeaderTextAlignment="Alignment.Center">
            @context.stock
        </GridColumn>
    </Grid>
</div>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }
    List<ProductViewModel> productList = new List<ProductViewModel>();
    Grid<ProductViewModel> productsGrid = default!;
    private Modal addEditProductModal = default!;

    protected override async Task OnInitializedAsync()
    {
        await UpdateData();
    }

    private async Task UpdateData()
    {
        try
        {
            PreloadService!.Show();
            var response = await productService.GetProducts();
            PreloadService.Hide();
            if (response.Success)
            {
                productList = response.Result ?? new List<ProductViewModel>();
                await productsGrid.RefreshDataAsync();
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage("Se produjo un error al obtener los productos."),
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            PreloadService!.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage("Se produjo un error al obtener los productos."),
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task ShowAddEditProductModal(ProductViewModel? product)
    {
        var productParam = product ?? new ProductViewModel();
        var parameters = new Dictionary<string, object>();
        parameters.Add("Product", productParam);
        parameters.Add("OnClose", EventCallback.Factory.Create<MouseEventArgs>(this, HideAddEditProductModal));
        await addEditProductModal.ShowAsync<AddEditProductComponent>(title: productParam.Id > 0 ? "Actualizar producto" : "Agregar nuevo producto", parameters: parameters);
    }

    private async Task ShowStockUpdateModal()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("ProductList", productList);
        parameters.Add("OnClose", EventCallback.Factory.Create<MouseEventArgs>(this, HideAddEditProductModal));
        await addEditProductModal.ShowAsync<StockUpdate>(title: "Actualizar Stock", parameters: parameters);
    }

    private async Task GenerateInventoryReport()
    {
        PreloadService!.Show();
        try
        {
            var response = await reportService.GenerateInventoryReport();

            var fileName = "Reporte de inventario.xlsx";

            using var streamRef = new DotNetStreamReference(stream: response);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            PreloadService.Hide();

            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Exito",
                    Text = "Reporte generado exitosamente.",
                    Icon = SweetAlertIcon.Success
                });
        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });

        }
    }

    private async Task HideAddEditProductModal(MouseEventArgs e)
    {
        await addEditProductModal.HideAsync();
    }
    private async Task OnRowClick(GridRowEventArgs<ProductViewModel> args)
    {
        await ShowAddEditProductModal(args.Item);
    }

    private async Task OnModalHiding()
    {
        await UpdateData();
    }
}
