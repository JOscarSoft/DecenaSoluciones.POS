@page "/Login"
@layout LoginLayout

@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.WebApp.Extensions;
@using Microsoft.AspNetCore.Components.Authorization
@using DecenaSoluciones.POS.Shared.Services;
@using CurrieTechnologies.Razor.SweetAlert2;
@using DecenaSoluciones.POS.Shared.Extensions

@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navManager
@inject SweetAlertService Swal;
@inject IAuthService authService;
@inject ICompanyService companyService;
@inject ILocalStorage _localStorage;

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<div class="row mt-5 text-center">

    <div class="col-lg-4 offset-lg-4 border" style="width:28%">

        <img src="/images/logo/LoginLogo.svg" alt="logo" style="width:50%;margin-bottom:10px">

        @if (OnCompanySelection)
        {
            <div class="mb-3">
                <RadzenDropDown 
                    Placeholder="Seleccione una compañía..." AllowClear="true" LoadData="FilterCompanies" 
                    AllowFiltering="true" @bind-Value=selectedCompany Data=@filteredCompanies TextProperty="Name" 
                    ValueProperty="Id" Style="width: 75%;" Name="DropDownCompanies" />
            </div>
            <div class="mb-3" style="margin-top:50px">
                <button @onclick="SubmitCompanyLogin" class="btn btn-lg btn-primary btn-block" style="width:75%">Acceder a Compañía</button>
            </div>
            <div class="divider"></div>
            <div class="row" >
                <div class="col"><hr></div>
                <div class="col-auto">O</div>
                <div class="col"><hr></div>
            </div>
            <div class="mb-3" style="margin-top:10px">
                <button @onclick="SubmitAdminLogin" class="btn btn-lg btn-dark btn-block" style="width:75%">Modulo Administrativo</button>
            </div>
        }
        else
        {
            <div class="mb-3">
                <input @bind="model.Username" class="form-control" placeholder="Usuario" style="width:75%;display: block;margin: 0 auto;" @onkeyup="@EnterLogin" />
            </div>

            <div class="mb-3">
                <input type="password" @bind="model.Password" class="form-control" placeholder="Contraseña" style="width:75%;display: block;margin: 0 auto;" @onkeyup="@EnterLogin" />
            </div>

            <div class="mb-3" style="margin-top:50px">
                <button @onclick="SubmitLogin" class="btn btn-lg btn-primary btn-block" style="width:75%">Login</button>
            </div>
        }

    </div>

</div>



@code {
    private int selectedCompany
    {
        get
        {
            return string.IsNullOrEmpty(model.CompanyId) ? 0 : int.Parse(model.CompanyId);
        }
        set
        {
            model.CompanyId = value.ToString();
        }
    }
    [Inject] protected PreloadService? PreloadService { get; set; }
    private LoginViewModel model = new LoginViewModel();
    List<ToastMessage> messages = new List<ToastMessage>();
    private List<CompanyViewModel> companies { get; set; } = new List<CompanyViewModel>();
    private List<CompanyViewModel> filteredCompanies { get; set; } = new List<CompanyViewModel>();
    private void ShowMessage(string message) => messages.Add(CreateToastMessage(ToastType.Danger, message));

    private bool OnCompanySelection = false;

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "¡Atención!",
            Message = message,
        };

    private string validateLogin()
    {
        if (string.IsNullOrEmpty(model.Username))
            return "Favor ingresar el usuario.";
        if (string.IsNullOrEmpty(model.Password))
            return "Favor ingresar el contraseña.";

        return string.Empty;
    }

    public async Task EnterLogin(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            await SubmitLogin();
    }

    private async Task SubmitCompanyLogin()
    {
        if (string.IsNullOrEmpty(model.CompanyId))
        {
            ShowMessage("Favor seleccionar la compañía.");
            return;
        }

        await SubmitLogin();
    }

    void FilterCompanies(LoadDataArgs args)
    {
        filteredCompanies = companies;

        if (!string.IsNullOrEmpty(args.Filter))
            filteredCompanies = companies.Where(c => c.Name.ToLower().Contains(args.Filter.ToLower())).ToList();

        InvokeAsync(StateHasChanged);
    }

    private void SubmitAdminLogin()
    {
        navManager.NavigateTo("/");
    }

    private async Task SubmitLogin()
    {
        string validations = validateLogin();
        if (!string.IsNullOrEmpty(validations))
        {
            ShowMessage(validations);
            return;
        }
        PreloadService!.Show();
        try
        {
            var response = await authService.Login(model);
            if (response.Success)
            {
                var authExt = (AuthExtension)autenticacionProvider;
                await authExt.UpdateSessionState(response.Result!);
                var userSession = await _localStorage.GetStorage<UserInfoExtension>("userSession");
                PreloadService.Hide();

                if (userSession!.IsCompanyCreator)
                    OnCompanySelection = true;
                else
                    navManager.NavigateTo("/");
            }
            else
            {
                PreloadService.Hide();
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message,
                        Icon = SweetAlertIcon.Error
                    });
            }

        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });

        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateCompanyList();
    }

    private async Task UpdateCompanyList()
    {
        try
        {
            PreloadService!.Show();
            var response = await companyService.GetCompanyList();
            PreloadService.Hide();
            if (response.Success)
            {
                companies = response.Result ?? new List<CompanyViewModel>();
                filteredCompanies = companies;
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage("Se produjo un error al obtener las compañías."),
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            PreloadService!.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage("Se produjo un error al obtener las compañías."),
                    Icon = SweetAlertIcon.Error
                });
        }
    }

}