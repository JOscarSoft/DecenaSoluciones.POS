@page "/quotations"

@using DecenaSoluciones.POS.Shared.Dtos;
@using CurrieTechnologies.Razor.SweetAlert2;
@using DecenaSoluciones.POS.WebApp.Pages.Components
@using DecenaSoluciones.POS.Shared.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize]
@inject SweetAlertService Swal;
@inject ISaleService saleService;
@inject NavigationManager navegation;

<h3>Historico de cotizaciones</h3>

<div class="row" style="margin-top:50px">
    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
        <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Class="float-end" @onclick="() => GoToNewQuotation()">Nueva cotización</Button>
    </div>
</div>

<SaleListComponent salesDataProvider="SalesDataProvider" quotations="1"></SaleListComponent>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }
    GridResponse<SalesViewModel>? salesList = default!;
    string quotationsUrl = "/newsale";

    private void GoToNewQuotation()
    {
        navegation.NavigateTo($"{quotationsUrl}/0/1");
    }

    public async Task<GridDataProviderResult<SalesViewModel>> SalesDataProvider(GridDataProviderRequest<SalesViewModel> request)
    {
        try
        {
            if (salesList == null)
                PreloadService!.Show();

            string sortString = "CreationDate";
            string sortDirection = "desc";

            if (request.Sorting is not null && request.Sorting.Any())
            {
                // Note: Multi column sorting is not supported at this moment
                sortString = request.Sorting.FirstOrDefault()!.SortString;
                sortDirection = request.Sorting.FirstOrDefault()!.SortDirection == SortDirection.Descending ? "desc" : "asc";
            }

            var response = await saleService.GetFilteredQuotationsList(new GridRequest()
                {
                    PageNumber = request.PageNumber,
                    PageSize = request.PageSize,
                    SortColumn = sortString,
                    SortDirection = sortDirection,
                    Filters = request.Filters.Select(p => new ColumnFilter
                    {
                        Field = p.PropertyName,
                        Operator = (DecenaSoluciones.POS.Shared.Enums.FilterOperator)(int)p.Operator,
                        Value = p.Value
                    }).ToList()
                });

            if (response.Success)
            {
                salesList = response.Result;
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage("Se produjo un error al obtener las cotizaciones."),
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage("Se produjo un error al obtener las cotizaciones."),
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            PreloadService!.Hide();
        }

        return await Task.FromResult(new GridDataProviderResult<SalesViewModel>
            {
                Data = salesList?.Items ?? new List<SalesViewModel>(),
                TotalCount = salesList?.TotalCount ?? 0
            });
    }
}
