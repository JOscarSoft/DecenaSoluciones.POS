@page "/newsale"
@page "/newsale/{ModelId:int}/{inQuotation:int?}"

@using BlazorInputMask
@using Blazored.LocalStorage;
@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.WebApp.Extensions;
@using DecenaSoluciones.POS.Shared.Services;
@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using DecenaSoluciones.POS.Shared.Extensions;
@using System.Globalization;

@attribute [Authorize]
@inject SweetAlertService Swal;
@inject IProductService productService;
@inject ICustomerService customerService;
@inject ISaleService saleService;
@inject IJSRuntime JSRuntime
@inject ILocalStorage _localStorage
@inject NavigationManager navegation;


<div class="row">
    <div class="col-lg-8">
        <h3>@title</h3>
    </div>
    <div class="col-lg-4">

        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
            @if (model.Id > 0)
            {
                <Button Color="ButtonColor.Success" Class="float-end" @onclick="() => GoNewSale()"><Icon Name="IconName.PlusCircle" /> Nueva venta</Button>
            }
            <Button Color="ButtonColor.Primary" Class="float-end" @onclick="() => BackToList()"><Icon Name="IconName.ArrowBarLeft" /> Historico</Button>
        </div>
    </div>
</div>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />
@if (model.Id > 0 && !string.IsNullOrEmpty(model.UserName))
{
    @if (model.Dismissed)
    {
        @if(model.DismissedBySaleId != null && model.DismissedBySaleId > 0)
        {
            <Alert Color="AlertColor.Warning">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                Venta modificada. Ver <a href="#" @onclick="() => GoToDismissed()" class="alert-link">@model.DismissedBySaleCode</a>.
            </Alert>
        }
        else
        {
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.TrashFill" class="me-2"></Icon>
                Venta desestimada.
            </Alert>
        }
    }
    <br />
    <div class="d-grid gap-2 mt-2">
        <label>Gestionado por <strong>@model.UserName</strong></label>
        <label><strong>@model.CreationDate.ToString("dd/MM/yyyy hh:mm tt")</strong></label>
    </div>
}

<div class="col-md-3" style="margin-top:45px;margin-bottom:25px;">
    <InputText class="form-control" @bind-Value="newCode" maxlength="15" @onkeydown="@EnterCode" placeholder="Buscar por código" @oninput="@(e => {newCode = e.Value!.ToString() ?? "";})"></InputText>
</div>
<EditForm Model="model" OnValidSubmit="(() => OnValidSubmit(false))" class="row g-3">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="col-lg-8">
        <table class="table">
            <thead>
                <tr class="bg-dark text-white border-bottom-0 headerRow">
                    <th>Producto</th>
                    <th>Stock</th>
                    <th>Cantidad</th>
                    <th>Precio unitario</th>
                    <th>Total</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var productSale in model.SaleProducts!)
                {
                    <tr>
                        <td style="width:45%">
                            <AutoComplete @bind-Value="productSale.ProductDescription"
                            TItem="ProductViewModel"
                            DataProvider="ProductsDataProvider"
                            PropertyName="Description"
                            Placeholder="Ingresa un producto..."
                            OnChanged="(ProductViewModel selected) => OnChangeProduct(selected, model.SaleProducts.ToList().IndexOf(productSale))" />
                            <InputText hidden="hidden" @bind-Value="productSale.ProductCode" />
                            <ValidationMessage For="@(() => productSale.ProductCode)"></ValidationMessage>
                        </td>
                        <td>
                            @GetStock(productSale.ProductCode)
                        </td>
                        <td style="width:5%">
                            <RadzenNumeric TValue="decimal" @bind-Value="productSale.Quantity" @onchange="(() => OnChangeProductDetail(model.SaleProducts.ToList().IndexOf(productSale)))" Culture="@CultureInfo.CreateSpecificCulture("en-US")" />
                            <ValidationMessage For="@(() => productSale.Quantity)"></ValidationMessage>
                        </td>
                        <td>
                            <RadzenNumeric TValue="decimal" @onchange="(() => OnChangeProductDetail(model.SaleProducts.ToList().IndexOf(productSale)))" class="form-control" Culture="@CultureInfo.CreateSpecificCulture("en-US")" Format="C2" ShowUpDown="false" @bind-Value=@productSale.UnitPrice />
                            <ValidationMessage For="@(() => productSale.UnitPrice)"></ValidationMessage>
                        </td>
                        <td>
                            @productSale.Total.ToString("C2", CultureInfo.CreateSpecificCulture("en-US"))
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="(() => removeProduct(model.SaleProducts.ToList().IndexOf(productSale)))">
                                <Icon Name="IconName.Trash" />
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-md-flex justify-content-md-end">
            <div style="margin-top:15px">
                <div class="form-group row mb-2">
                    <label class="col-md-5 col-form-label">Subtotal:</label>
                    <div class="col-md-7">
                        <input type="text" class="form-control" value="@subTotal" disabled />
                    </div>
                </div>
                <div class="form-group row mb-2">
                    <label class="col-md-5 col-form-label">Impuestos:</label>
                    <div class="col-md-7">
                        <input type="text" class="form-control" value="@totalTaxes" disabled />
                    </div>
                </div>
                <div class="form-group row mb-2">
                    <label class="col-md-5 col-form-label">Mano de obra:</label>
                    <div class="col-md-7">
                        <RadzenNumeric TValue="decimal?" class="form-control" Culture="@CultureInfo.CreateSpecificCulture("en-US")" Format="C2" ShowUpDown="false" @bind-Value=@model.WorkForceValue />
                        <ValidationMessage For="@(() => model.WorkForceValue)"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group row mb-2">
                    <label class="col-md-5 col-form-label">Descuento:</label>
                    <div class="col-md-7">
                        <RadzenNumeric TValue="decimal?" class="form-control" Culture="@CultureInfo.CreateSpecificCulture("en-US")" Format="C2" ShowUpDown="false" @bind-Value=@model.Discount />
                        <ValidationMessage For="@(() => model.Discount)"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group row mb-2">
                    <label class="col-md-5 col-form-label">Total:</label>
                    <div class="col-md-7">
                        <input type="text" class="form-control" value="@totalAmount" disabled />
                    </div>
                </div>
                @if (!TCPayment && !DepositPayment)
                {
                    <div class="form-group row mb-2">
                        <label class="col-md-5 col-form-label">Monto pagado:</label>
                        <div class="col-md-7">
                            <RadzenNumeric TValue="decimal?" class="form-control" Culture="@CultureInfo.CreateSpecificCulture("en-US")" Format="C2" ShowUpDown="false" @bind-Value=@model.CashAmount />
                            <ValidationMessage For="@(() => model.CashAmount)"></ValidationMessage>
                        </div>
                    </div>
                }
                <div class="form-group row mb-2">
                    <label class="col-md-5 col-form-label">Devolución:</label>
                    <div class="col-md-7">
                        <input type="text" class="form-control" value="@totalDevolution" disabled />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <Card Style="width:100%;">
            <CardHeader>
                <div class="row g-3">
                    <div class="col-md-9">
                        <h5 class="form-label" style="margin-top:15px">Datos del cliente</h5>
                    </div>
                    <div class="col-md-3">
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-2">
                            @if (disabledClientFields)
                            {
                                <Button Color="ButtonColor.Primary" Class="float-end" @onclick="() => OnChangeCustomer(null, true)"><Icon Name="IconName.PlusCircle" /></Button>
                            }
                            else
                            {
                                <Button Color="ButtonColor.Danger" Class="float-end" @onclick="() => OnChangeCustomer(null, false)"><Icon Name="IconName.XCircle" /></Button>
                            }
                        </div>
                    </div>
                </div>
            </CardHeader>
            <CardBody>
                <div class="row g-3">
                    @if (disabledClientFields)
                    {
                        <div class="col-md-12">
                            <label class="form-label">Nombre:</label>
                            <AutoComplete @bind-Value="model.Customer!.Name"
                            TItem="CustomerViewModel"
                            DataProvider="CustomersDataProvider"
                            PropertyName="Name"
                            Placeholder="Ingresa un cliente..."
                            OnChanged="(CustomerViewModel selected) => OnChangeCustomer(selected, false)" />
                            <NumberInput TValue="int" hidden="hidden" @bind-Value="model.Customer.Id" />
                            <ValidationMessage For="@(() => model.Customer.Id)"></ValidationMessage>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <label class="form-label">Nombre:</label>
                            <InputText class="form-control" @bind-Value="model.Customer!.Name" maxlength="50"></InputText>
                            <ValidationMessage For="@(() => model.Customer.Name)"></ValidationMessage>
                        </div>
                        <div class="col-md-12">
                            <label class="form-label">Apellido:</label>
                            <InputText class="form-control" @bind-Value="model.Customer.LastName" maxlength="50"></InputText>
                            <ValidationMessage For="@(() => model.Customer.LastName)"></ValidationMessage>
                        </div>
                    }
                    <div class="col-md-12">
                        <label class="form-label">Teléfono:</label>
                        <InputMask @bind-Value="model.Customer.PhoneNumber" class="form-control" data-mask="(000) 000-0000" disabled="@disabledClientFields" />
                        <ValidationMessage For="@(() => model.Customer.PhoneNumber)"></ValidationMessage>
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Dirección:</label>
                        <InputText class="form-control" @bind-Value="model.Customer.Direction" maxlength="500" disabled="@disabledClientFields"></InputText>
                        <ValidationMessage For="@(() => model.Customer.Direction)"></ValidationMessage>
                    </div>
                </div>
            </CardBody>
        </Card>
    </div>
    @if (!model.Dismissed)
    {
        <Switch @bind-Value="DepositPayment" Label="Pago con depósito" @onchange="(() => {model.DepositsAmount = null;model.DepositReference = null;})" />
        <Switch @bind-Value="TCPayment" Label="Pago con TC" @onchange="(() => {model.TCAmount = null;model.TCReference = null;})" />
        <Switch @bind-Value="isCashSale" Label="Venta al contado" @onchange="(() => {model.CreditSale = !isCashSale;})" />
    }
    @if (TCPayment || DepositPayment)
    {
        <div class="col-lg-4">
            <div class="col-md-12">
                <label class="form-label">Monto efectivo:</label>
                <RadzenNumeric TValue="decimal?" class="form-control" Culture="@CultureInfo.CreateSpecificCulture("en-US")" Format="C2" ShowUpDown="false" @bind-Value=@model.CashAmount />
                <ValidationMessage For="@(() => model.CashAmount)"></ValidationMessage>
            </div>
        </div>
    }
    @if (TCPayment)
    {
        <div class="col-lg-4">
            <div class="col-md-12">
                <label class="form-label">Monto TC:</label>
                <RadzenNumeric TValue="decimal?" class="form-control" Culture="@CultureInfo.CreateSpecificCulture("en-US")" Format="C2" ShowUpDown="false" @bind-Value=@model.TCAmount />
                <ValidationMessage For="@(() => model.TCAmount)"></ValidationMessage>
            </div>
            <div class="col-md-12" style="margin-top:15px!important">
                <label class="form-label">Referencia transacción:</label>
                <InputText class="form-control" @bind-Value="model.TCReference" maxlength="50"></InputText>
                <ValidationMessage For="@(() => model.TCReference)"></ValidationMessage>
            </div>
        </div>
    }
    @if (DepositPayment)
    {
        <div class="col-lg-4">
            <div class="col-md-12">
                <label class="form-label">Monto deposito:</label>
                <RadzenNumeric TValue="decimal?" class="form-control" Culture="@CultureInfo.CreateSpecificCulture("en-US")" Format="C2" ShowUpDown="false" @bind-Value=@model.DepositsAmount />
                <ValidationMessage For="@(() => model.DepositsAmount)"></ValidationMessage>
            </div>
            <div class="col-md-12" style="margin-top:15px!important">
                <label class="form-label">Referencia transacción:</label>
                <InputText class="form-control" @bind-Value="model.DepositReference" maxlength="50"></InputText>
                <ValidationMessage For="@(() => model.DepositReference)"></ValidationMessage>
            </div>
        </div>
    }

    <div class="d-grid gap-2 d-md-flex mt-2" style="margin-top:25px!important">
        @if (!model.Dismissed)
        {
            <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Primary" Class="float-end" @onclick="() => OnValidSubmit(false)">@processSaleText</Button>
        }

        @if (model.Id <= 0 || model.IsAQuotation)
        {
            <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Dark" Class="float-end" @onclick="() => OnValidSubmit(true)">@processQuotationText</Button>
        }

        @if ((model.Id > 0 && !model.IsAQuotation) && !model.Dismissed)
        {
            <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end" @onclick="() => ReGenerateReceipt()">Re-imprimir factura</Button>
        }

        @if (ModelId > 0 && !model.Dismissed && !model.IsAQuotation)
        {
            <AuthorizeView Roles="admin, manager" Context="authContext">
                <Button Type="BlazorBootstrap.ButtonType.Button" Color="ButtonColor.Danger" Class="float-end" @onclick="() => DismissSale()">Desestimar venta</Button>
            </AuthorizeView>
        }

    </div>
</EditForm>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }
    [Parameter] public int ModelId { get; set; } = 0;
    [Parameter] public int? inQuotation { get; set; }

    List<ProductViewModel> ProductList { get; set; } = new List<ProductViewModel>();
    List<CustomerViewModel> CustomerList { get; set; } = new List<CustomerViewModel>();

    AddEditSale model = new AddEditSale();
    List<ToastMessage> messages = new List<ToastMessage>();
    private void ShowMessage(string message) => messages.Add(CreateToastMessage(ToastType.Warning, message));

    string newCode = string.Empty;
    string processSaleText = "Procesar venta";
    string processQuotationText = "Generar cotización";
    string title = "Nueva venta";
    bool disabledClientFields = true;
    bool TCPayment = false;
    bool DepositPayment = false;
    bool isCashSale = true;

    string totalAmount => ToMoneyString(GetTotalAmount());
    string totalDevolution => ToMoneyString(((model.CashAmount ?? 0M) + (model.TCAmount ?? 0m) + (model.DepositsAmount ?? 0)) - GetTotalAmount());
    string totalTaxes => ToMoneyString(model.SaleProducts!.Sum(p => p.ITBIS));
    string subTotal => ToMoneyString(model.SaleProducts!.Sum(p => p.Total) - model.SaleProducts!.Sum(p => p.ITBIS));

    private string ToMoneyString(decimal value) => $"{value.ToString("C2", CultureInfo.CreateSpecificCulture("en-US"))}";
    private string GetStock(string productCode) => ProductList.FirstOrDefault(p => p.Code == productCode)?.stock.ToString() ?? "0";
    private void BackToList() => navegation.NavigateTo(inQuotation != null && inQuotation > 0 ? "quotations" : "sales"); 
    private void GoToDismissed() => navegation.NavigateTo($"/newsale/{model.DismissedBySaleId}/0", true);
    private void GoNewSale() => navegation.NavigateTo($"/newsale", true);

    public void EnterCode(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            var newProduct = ProductList.FirstOrDefault(p => p.Code.ToUpper() == newCode.ToUpper());
            if (newProduct != null)
            {
                int lastIndex = model.SaleProducts!.Count - 1;
                model.SaleProducts.ElementAt(lastIndex).ProductId = newProduct!.Id;
                model.SaleProducts.ElementAt(lastIndex).ProductCode = newProduct!.Code;
                model.SaleProducts.ElementAt(lastIndex).ProductDescription = newProduct!.Description;
                model.SaleProducts.ElementAt(lastIndex).Quantity = 1;
                model.SaleProducts.ElementAt(lastIndex).UnitPrice = newProduct.Price;
                model.SaleProducts.ElementAt(lastIndex).ITBIS = newProduct.ITBIS > 0 ? newProduct.Price * (newProduct.ITBIS / 100) : 0M;
                model.SaleProducts!.Add(new AddEditSaleProduct());

                newCode = string.Empty;
                return;
            }

            ShowMessage("Producto no encontrado");
        }
    }

    private decimal GetTotalAmount()
    {
        decimal calc = 0.0M;
        calc += model.SaleProducts!.Sum(p => p.Total);
        calc += model.WorkForceValue ?? 0.0M;
        calc -= model.Discount ?? 0.0M;
        return calc;
    }

    private async Task<AutoCompleteDataProviderResult<ProductViewModel>> ProductsDataProvider(AutoCompleteDataProviderRequest<ProductViewModel> request)
    {
        return await Task.FromResult(request.ApplyTo(ProductList.OrderBy(prod => prod.Description)));
    }

    private async Task<AutoCompleteDataProviderResult<CustomerViewModel>> CustomersDataProvider(AutoCompleteDataProviderRequest<CustomerViewModel> request)
    {
        return await Task.FromResult(request.ApplyTo(CustomerList.OrderBy(prod => prod.Name)));
    }

    private void OnChangeCustomer(CustomerViewModel? selected, bool newOne)
    {
        if (model.Dismissed)
            return;

        if (selected != null)
        {
            disabledClientFields = true;
            model.Customer!.Id = selected.Id;
            model.Customer.Name = selected.Name;
            model.Customer.PhoneNumber = selected.PhoneNumber;
            model.Customer.Direction = selected.Direction;
            return;
        }
        disabledClientFields = !newOne;
        model.Customer = new AddEditCustomer();
    }

    protected override async Task OnInitializedAsync()
    {
        PreloadService!.Show();
        await Task.WhenAll(LoadProducts(), LoadCustomers());
        await LoadSale();
        if (ModelId > 0)
        {
            processQuotationText = "Modificar cotización";
            processSaleText = "Modificar venta";
            title = "Detalles de la venta";

            if (model.IsAQuotation)
            {
                processSaleText = "Generar venta";
                title = "Detalles de la cotización";
                model.CreditSale = false;
            }

            title = $"{title} - {model.Code}";
            isCashSale = model.CreditSale == false;
        }
        else if (inQuotation != null && inQuotation > 0)
        {
            title = "Nueva cotización";
        }

        PreloadService.Hide();
    }

    private async Task LoadSale()
    {
        try
        {
            if (ModelId > 0)
            {
                ApiResponse<AddEditSale> response = new ApiResponse<AddEditSale>();

                if (inQuotation != null && inQuotation > 0)
                    response = await saleService.GetQuotationById(ModelId);
                else
                    response = await saleService.GetSaleById(ModelId);

                if (response.Success)
                {
                    var saleResult = response.Result ?? new AddEditSale();
                    foreach (var salProduct in saleResult.SaleProducts!)
                    {
                        var product = ProductList.FirstOrDefault(p => p.Id == salProduct.ProductId);
                        if (product != null)
                        {
                            salProduct.ProductCode = product.Code;
                            salProduct.ProductDescription = product.Description;
                        }
                    }
                    if (saleResult.CustomerId != null && saleResult.CustomerId > 0)
                    {

                        var cust = CustomerList.FirstOrDefault(p => p.Id == saleResult.CustomerId);
                        saleResult.Customer!.Name = cust!.Name;
                        saleResult.Customer.Id = cust.Id;
                    }
                    else
                    {
                        saleResult.Customer = new AddEditCustomer();
                    }

                    TCPayment = saleResult.TCAmount != null && saleResult.TCAmount > 0;
                    DepositPayment = saleResult.DepositsAmount != null && saleResult.DepositsAmount > 0;

                    model = saleResult;
                    model.CashAmount = TCPayment || DepositPayment ? GetTotalAmount() : saleResult.CashAmount;

                }
                else
                {
                    PreloadService!.Hide();
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = response.Message.HandleErrorMessage("Se produjo un error al obtener los datos."),
                            Icon = SweetAlertIcon.Error
                        });
                }
            }
            model.SaleProducts!.Add(new AddEditSaleProduct());
        }
        catch (Exception ex)
        {
            PreloadService!.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage("Se produjo un error al obtener los datos."),
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task LoadProducts()
    {
        try
        {
            var response = await productService.GetProducts();
            if (response.Success)
            {
                ProductList = response.Result ?? new List<ProductViewModel>();
            }
            else
            {
                PreloadService!.Hide();
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage("Se produjo un error al obtener los productos."),
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            PreloadService!.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage("Se produjo un error al obtener los productos."),
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task LoadCustomers()
    {
        try
        {
            var response = await customerService.GetCustomerList();
            if (response.Success)
            {
                CustomerList = response.Result ?? new List<CustomerViewModel>();
            }
            else
            {
                PreloadService!.Hide();
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage("Se produjo un error al obtener los clientes."),
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            PreloadService!.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage("Se produjo un error al obtener los clientes."),
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private string validateSale()
    {
        var products = model.SaleProducts!.Where(p => !string.IsNullOrEmpty(p.ProductCode));
        if (!products.Any())
            return "Favor de ingresar al menos un producto.";

        if (products.Any(p => p.Total <= 0))
            return "Uno de los productos ingresados no tiene datos. Favor de validar.";

        var total = (model.TCAmount ?? 0.00M) + (model.CashAmount ?? 0.00M) + (model.DepositsAmount ?? 0.00M);
        if (!model.IsAQuotation && total < GetTotalAmount())
            return $"Montos ingresados no cuadran con total facturado. Facturado: {ToMoneyString(GetTotalAmount())}. Ingresado: {ToMoneyString(total)}.";

        return string.Empty;
    }

    private async Task ReGenerateReceipt()
    {
        PreloadService!.Show();
        try
        {
            var response = await saleService.ReGenerateReceipt(model.Code!);
            PreloadService.Hide();
            if (response.Success)
            {
                if (string.IsNullOrEmpty(response.Result))
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = "Se produjo un error generando el recibo.",
                            Icon = SweetAlertIcon.Error
                        });

                    return;
                }

                await JSRuntime.InvokeVoidAsync("printHtmlString", response.Result);

                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Exito",
                        Text = $"Recibo generado exitosamente.",
                        Icon = SweetAlertIcon.Success
                    });

            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage(),
                        Icon = SweetAlertIcon.Error
                    });
            }

        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });

        }
    }

    private async Task DismissSale()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Desestimar venta",
                        Text = "Esta venta no podrá ser restaurada y el stock de los productos se restablecerá. ¿Está seguro de desestimar la venta?",
                        Icon = SweetAlertIcon.Question,
                        ShowCancelButton = true,
                        CancelButtonText = "Cancelar"
                    });

        if(result.IsConfirmed)
        {
            PreloadService!.Show();
            try
            {
                var response = await saleService.DismissSale(model.Id);
                PreloadService.Hide();
                if (response.Success)
                {
                    model = response.Result!;
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Exito",
                            Text = $"Venta desestimada con éxito.",
                            Icon = SweetAlertIcon.Success
                        });

                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = response.Message.HandleErrorMessage(),
                            Icon = SweetAlertIcon.Error
                        });
                }

            }
            catch (Exception ex)
            {
                PreloadService.Hide();
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = ex.Message.HandleErrorMessage(),
                        Icon = SweetAlertIcon.Error
                    });

            }
        }
    }

    private async Task OnValidSubmit(bool isQuotation)
    {
        if (!TCPayment && !DepositPayment && (model.CashAmount == null || model.CashAmount == 0m))
        {
            model.CashAmount = GetTotalAmount();
        }

        string validations = validateSale();

        if (string.IsNullOrEmpty(validations))
        {
            var confirmed = true;

            if (model.SaleProducts!
                .GroupBy(p => p.ProductId)
                .Any(p => p.Count() > 1))
            {
                var result = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Producto duplicado",
                        Text = "Uno o mas productos fueron ingresado varias veces. ¿Está seguro de continuar con la venta?",
                        Icon = SweetAlertIcon.Question,
                        ShowCancelButton = true,
                        CancelButtonText = "Cancelar"
                    });

                confirmed = result.IsConfirmed;
            }

            if (confirmed)
            {
                PreloadService!.Show();
                try
                {
                    var userSession = await _localStorage.GetStorage<UserInfoExtension>("userSession");
                    if (userSession != null)
                        model.UserName = userSession.Username;

                    model.CreditSale = !isCashSale;
                    model.SaleProducts = model.SaleProducts!.Where(p => !string.IsNullOrEmpty(p.ProductCode)).ToList();
                    if (ModelId == 0)
                    {
                        model.IsAQuotation = isQuotation;
                        await goCreateNewSale(isQuotation);
                    }
                    else
                    {
                        if(!isQuotation && model.IsAQuotation)
                        {
                            model.Id = 0;
                            model.Dismissed = false;
                            model.CreationDate = DateTime.Now;
                            model.IsAQuotation = false;
                            foreach (var item in model.SaleProducts)
                                item.Id = 0;

                            var newSale = await goCreateNewSale(isQuotation);
                            if(newSale != null)
                                navegation.NavigateTo($"/newsale/{newSale.Id}/0", true);
                        }
                        else
                        {
                            model.IsAQuotation = isQuotation;
                            await goUpdateSale(isQuotation);
                        }                       

                    }

                }
                catch (Exception ex)
                {
                    PreloadService.Hide();
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = ex.Message.HandleErrorMessage(),
                            Icon = SweetAlertIcon.Error
                        });

                }
            }
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = validations,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task<AddEditSale?> goCreateNewSale(bool isQuotation)
    {
        (var receipt, var response) = await saleService.AddNewSale(model);
        PreloadService!.Hide();
        if (response.Success)
        {
            model = new AddEditSale();
            model.SaleProducts!.Add(new AddEditSaleProduct());

            if (string.IsNullOrEmpty(receipt))
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Se produjo un error generando el recibo.",
                        Icon = SweetAlertIcon.Error
                    });

                return null;
            }

            await JSRuntime.InvokeVoidAsync("printHtmlString", receipt);

            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Exito",
                    Text = isQuotation ? $"Cotización {response.Result!.Code} generada exitosamente." : "Venta procesada exitosamente.",
                    Icon = SweetAlertIcon.Success
                });

            return response.Result;
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = response.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });

            return null;
        }
    }

    private async Task goUpdateSale(bool isQuotation)
    {
        (var receipt, var response) = await saleService.UpdateSale(ModelId, model);
        PreloadService!.Hide();
        if (response.Success)
        {
            if (string.IsNullOrEmpty(receipt))
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Se produjo un error generando el recibo.",
                        Icon = SweetAlertIcon.Error
                    });

                return;
            }

            await JSRuntime.InvokeVoidAsync("printHtmlString", receipt);
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Exito",
                    Text = isQuotation ? $"Cotización {response.Result!.Code} generada exitosamente." : "Venta modificada exitosamente.",
                    Icon = SweetAlertIcon.Success
                });

            BackToList();
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = response.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private void removeProduct(int productIndex)
    {
        if (model.Dismissed)
            return;

        if (productIndex == model.SaleProducts!.Count - 1)
            return;

        model.SaleProducts.Remove(model.SaleProducts!.ToList().ElementAt(productIndex));
    }

    private void OnChangeProduct(ProductViewModel selected, int productIndex)
    {
        if (model.Dismissed)
            return;

        if (selected != null)
        {
            if (productIndex == model.SaleProducts!.Count - 1)
                model.SaleProducts.Add(new AddEditSaleProduct());

            model.SaleProducts.ElementAt(productIndex).ProductId = selected!.Id;
            model.SaleProducts.ElementAt(productIndex).ProductCode = selected!.Code;
            model.SaleProducts.ElementAt(productIndex).ProductDescription = selected!.Description;
            model.SaleProducts.ElementAt(productIndex).Quantity = 1;
            model.SaleProducts.ElementAt(productIndex).UnitPrice = selected.Price;
            model.SaleProducts.ElementAt(productIndex).ITBIS = selected.ITBIS > 0 ? selected.Price * (selected.ITBIS / 100) : 0M;
        }
    }

    private void OnChangeProductDetail(int productIndex)
    {
        var element = model.SaleProducts!.ElementAt(productIndex);
        if (element != null && !string.IsNullOrEmpty(element.ProductCode))
        {
            var product = ProductList.FirstOrDefault(p => p.Code == element.ProductCode);
            model.SaleProducts!.ElementAt(productIndex).ITBIS = product!.ITBIS > 0 ? element.Quantity * element.UnitPrice * (product!.ITBIS / 100) : 0M;
        }
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Aviso",
            Message = message,
        };
}
