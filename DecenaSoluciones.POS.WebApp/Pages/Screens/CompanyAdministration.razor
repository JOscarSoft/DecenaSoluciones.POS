@page "/company-administration"


@using BlazorInputMask
@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.WebApp.Extensions;
@using DecenaSoluciones.POS.Shared.Services;
@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.AspNetCore.Components.Authorization

@inject SweetAlertService Swal;
@inject IAuthService authService;
@inject ICompanyService companyService;
@inject ISaleService saleService;
@inject ILocalStorage _localStorage;

<style>
    .accordion-button {
    font-weight: bold !important;
    }
</style>

<div class="row">
    <div class="col-lg-8">
        <h3>Modificar Datos de la Compañía</h3>
    </div>
</div>

<EditForm Model="companyModel" OnValidSubmit="OnValidSubmit" class="row g-3" Context="EditFormContext" style="margin-top:50px">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="col-md-6">
        <label class="form-label" style="font-weight:bold">Nombre:</label>
        <InputText class="form-control" @bind-Value="companyModel.Name" maxlength="50"></InputText>
        <ValidationMessage For="@(() => companyModel.Name)"></ValidationMessage>
    </div>
    <div class="col-md-6">
        <label class="form-label" style="font-weight:bold">Eslogan:</label>
        <InputText class="form-control" @bind-Value="companyModel.Slogan" maxlength="80"></InputText>
        <ValidationMessage For="@(() => companyModel.Slogan)"></ValidationMessage>
    </div>
    <div class="col-md-6">
        <label class="form-label" style="font-weight:bold">Telefono:</label>
        <InputMask @bind-Value="companyModel.ContactPhone" class="form-control" data-mask="(000) 000-0000" />
        <ValidationMessage For="@(() => companyModel.ContactPhone)"></ValidationMessage>
    </div>
    <div class="col-md-6">
        <label class="form-label" style="font-weight:bold">Dirección:</label>
        <InputTextArea class="form-control" @bind-Value="companyModel.Address" maxlength="225"></InputTextArea>
        <ValidationMessage For="@(() => companyModel.Address)"></ValidationMessage>
    </div>

    <Accordion Flush="true">
        <AccordionItem Title="Recibo de ventas">
            <Content>
                <RadzenHtmlEditor @bind-Value=@companyModel.SalesReceipt Style="height:615px"/>
                <ValidationMessage For="@(() => companyModel.SalesReceipt)"></ValidationMessage>
            </Content>
        </AccordionItem>
        <AccordionItem Title="Recibo de cotizaciones">
            <Content>
                <RadzenHtmlEditor @bind-Value=@companyModel.QuotationsReceipt />
                <ValidationMessage For="@(() => companyModel.QuotationsReceipt)"></ValidationMessage>
            </Content>
        </AccordionItem>
    </Accordion>   

    <div style="margin-top:50px">
        <AuthorizeView Roles="admin" Context="authContext">
            <button type="submit" Class="btn btn-primary">
                Guardar Cambios
            </button>
        </AuthorizeView>
    </div>
</EditForm>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }

    int CompanyId = 0;
    AddEditCompany companyModel = new AddEditCompany();
    List<RegistrationViewModel> companyUsers = new List<RegistrationViewModel>();
    string htmlPreviewContent = "";

    protected override async Task OnInitializedAsync()
    {
        PreloadService!.Show();
        await LoadCompany();
        PreloadService.Hide();
    }

    private async Task LoadCompany()
    {
        try
        {
            var userSession = await _localStorage.GetStorage<UserInfoExtension>("userSession");
            CompanyId = int.Parse(userSession!.CompanyId);

            var response = await companyService.GetCompany(CompanyId);
            if (response.Success)
            {
                companyModel = new AddEditCompany(response.Result);

                await LoadDefaultTemplates();
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage("Se produjo un error al obtener los datos de la compañía."),
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage("Se produjo un error al obtener los datos de la compañía."),
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task OnValidSubmit()
    {
        if(string.IsNullOrEmpty(companyModel.Name))
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Favor ingresar el nombre de la compañía.",
                    Icon = SweetAlertIcon.Error
                });
            return;
        }

        var receiptOK = true;

        if (string.IsNullOrWhiteSpace(companyModel.QuotationsReceipt) || 
        string.IsNullOrWhiteSpace(companyModel.SalesReceipt))
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Recibo(s) no configurado(s)",
                    Text = "Si deja la plantilla de los recibos en blanco se usarán la plantilla por defecto.",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    CancelButtonText = "Cancelar"
                });

            receiptOK = result.IsConfirmed;
        }

        if (!receiptOK)
            return;


        PreloadService!.Show();
        try
        {
            var response = await companyService.UpdateCompany(CompanyId, companyModel);
            PreloadService.Hide();
            if (response.Success)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Exito",
                        Text = "Datos actualizados exitosamente.",
                        Icon = SweetAlertIcon.Success
                    });

                await LoadDefaultTemplates();
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage("Se produjo un error al modificar los datos."),
                        Icon = SweetAlertIcon.Error
                    });
            }

        }
        catch(Exception ex)
        {
            PreloadService.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });

        }

    }

    private async Task LoadDefaultTemplates()
    {
        if(string.IsNullOrEmpty(companyModel.QuotationsReceipt))
        {
            var defaultQuotationTemplate = await saleService.GetDefaultQuotationTemplateAsync(CompanyId);
            companyModel.QuotationsReceipt = defaultQuotationTemplate;
        }

        if (string.IsNullOrEmpty(companyModel.SalesReceipt))
        {
            var defaultSaleTemplate = await saleService.GetDefaultSaleTemplateAsync();
            companyModel.SalesReceipt = defaultSaleTemplate;
        }
    }
}
