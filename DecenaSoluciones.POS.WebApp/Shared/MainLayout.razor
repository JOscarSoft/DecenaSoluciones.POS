@using BlazorBootstrap
@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.WebApp.Extensions;
@using DecenaSoluciones.POS.WebApp.Pages;
@using DecenaSoluciones.POS.WebApp.Pages.Components;
@using Microsoft.AspNetCore.Components.Authorization;
@using DecenaSoluciones.POS.Shared.Extensions;
@inherits LayoutComponentBase

@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navManager
@inject ILocalStorage _localStorage

<div class="bb-page">
    <style>
        :root {
            --bb-sidebar-width: 300px;
            --bb-sidebar-collapsed-width: 50px;
            --bb-sidebar-background-color: #fff;
            --bb-sidebar-top-row-background-color: rgba(0,0,0,0.08);
            --bb-sidebar-top-row-border-color: rgb(194,192,192);
            --bb-sidebar-title-text-color: #000080;
            --bb-sidebar-brand-icon-color: #6f42c1;
            --bb-sidebar-brand-image-width: 35px;
            --bb-sidebar-brand-image-height: 35px;
            --bb-sidebar-title-badge-text-color: rgb(255,255,255);
            --bb-sidebar-title-badge-background-color: rgba(25,135,84,var(--bs-bg-opacity,1));
            --bb-sidebar-navbar-toggler-icon-color: rgb(0,0,0);
            --bb-sidebar-navbar-toggler-background-color: rgba(0,0,0,0.08);
            --bb-sidebar-content-border-color: rgb(194,192,192);
            --bb-sidebar-nav-item-text-color: #000080;
            --bb-sidebar-nav-item-text-active-color-rgb: 0,0,0;
            --bb-sidebar-nav-item-text-hover-color: #fff;
            --bb-sidebar-nav-item-text-active-color: #fff;
            --bb-sidebar-nav-item-background-hover-color: #000080;
            --bb-sidebar-nav-item-group-background-color: rgba(0,0,0,0.08);
        }
    </style>
    <Sidebar @ref="sidebar"
             ImageSrc="/images/logo/Logo-Simple.png"
             Title="Decena Soluciones Técnicas"
             DataProvider="SidebarDataProvider" />

    <main>
        <AuthorizeView>
            <div class="bb-top-row px-4 d-flex justify-content-end">
                <Dropdown>
                    <DropdownToggleButton Color="ButtonColor.Primary">@context.User.Identity!.Name</DropdownToggleButton>
                    <DropdownMenu>
                            <DropdownItem To="#" Type="BlazorBootstrap.ButtonType.Link" @onclick="(() => ShowChangePasswordModal(context.User.Identity?.Name ?? string.Empty))" href="javascript:void(0)">Cambiar contraseña</DropdownItem>
                            <DropdownItem To="#" Type="BlazorBootstrap.ButtonType.Link" @onclick="CerrarSesion" href="javascript:void(0)">Cerrar sesión</DropdownItem>
                    </DropdownMenu>
                </Dropdown>
            </div>
        </AuthorizeView>

        <article class="content px-4">
            <div class="py-2">
                @Body
            </div>
        </article>
    </main>

</div>


<Modal @ref="changePasswordModal" UseStaticBackdrop="true" Size="ModalSize.Regular" />

@code {
    private Sidebar sidebar = default!;
    private IEnumerable<NavItem> navItems = default!;
    private Modal changePasswordModal = default!;

    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = await GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private async Task<IEnumerable<NavItem>> GetNavItems()
    {
        var userSession = await _localStorage.GetStorage<UserInfoExtension>("userSession");
        if (userSession!.IsCompanyCreator)
        {
            navItems = new List<NavItem>
            {
                new NavItem { Id = "1", Href = "/companies", IconName = IconName.BuildingFillGear, Text = "Compañías" }
            };
        }
        else
        {
            navItems = new List<NavItem>
            {
                new NavItem { Id = "1", Href = "/", IconName = IconName.HouseDoorFill, Text = "Inicio", Match = NavLinkMatch.All},
                new NavItem { Id = "2", Href = "/products", IconName = IconName.BoxSeamFill, Text = "Productos"},
                new NavItem { Id = "3", Href = "/customers", IconName = IconName.PeopleFill, Text = "Clientes"},
                new NavItem { Id = "4", IconName = IconName.CartCheckFill, Text = "Ventas"},
                new NavItem { Id = "5", Href = "/newsale", IconName = IconName.Receipt, Text = "Nueva venta", ParentId="4"},
                new NavItem { Id = "6", Href = "/sales", IconName = IconName.FolderSymlinkFill, Text = "Historico ventas", ParentId="4"},
                new NavItem { Id = "7", Href = "/quotations", IconName = IconName.FolderSymlinkFill, Text = "Historico cotizaciones", ParentId="4"},
            };
        }


        if (userSession != null && userSession.Roles.Any(p => p == UserRoles.Admin))
            navItems = navItems.Append(new NavItem { Id = "8", Href = "/users", IconName = IconName.FilePersonFill, Text = "Usuarios" });

        return navItems;
    }

    private async Task ShowChangePasswordModal(string userName)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("userName", userName);
        parameters.Add("OnClose", EventCallback.Factory.Create<MouseEventArgs>(this, HideChangePasswordModal));
        await changePasswordModal.ShowAsync<ChangePasswordComponent>(title: $"Actualizar Contraseña - {userName}", parameters: parameters);
    }

    private async Task HideChangePasswordModal(MouseEventArgs e)
    {
        await changePasswordModal.HideAsync();
    }

    private async Task CerrarSesion()
    {
        var autenticacionExt = (AuthExtension)autenticacionProvider;
        await autenticacionExt.UpdateSessionState(string.Empty);
        navManager.NavigateTo("/Login", true);
    }
}

<Preload />