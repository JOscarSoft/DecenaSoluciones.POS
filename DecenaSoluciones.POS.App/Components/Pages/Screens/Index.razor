@page "/"
@* @using BlazorBootstrap.Utilities; *@
@using CurrieTechnologies.Razor.SweetAlert2;
@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.Shared.Services;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize]
@inject IReportService reportService;
@inject SweetAlertService Swal;

<style>
    div:has(.charDiv) {
        margin: 0 auto;
    }
</style>

<div class="text-center">
    <DoughnutChart @ref="doughnutChart" Width="350" Class="charDiv" />
</div>

@code{
    [Inject] protected PreloadService? PreloadService { get; set; }
    DashboardViewModel viewModel = new DashboardViewModel();
    private DoughnutChart doughnutChart = default!;
    private DoughnutChartOptions doughnutChartOptions = default!;
    private ChartData chartData = default!;
    private string[]? backgroundColors;

    protected override async Task OnInitializedAsync()
    {
        PreloadService!.Show();
        try
        {
            var response = await reportService.GetDashboardReport();

            PreloadService!.Hide();
            if (response.Success)
            {
                viewModel = response.Result ?? new DashboardViewModel();
                backgroundColors = ColorBuilder.CategoricalTwelveColors;
                chartData = new ChartData { Labels = viewModel.SoldProducts.Select(p => p.ProductName).ToList(), Datasets = new List<IChartDataset> { GetCharDataSet(viewModel.SoldProducts) } };
                doughnutChartOptions = new();
                doughnutChartOptions.Responsive = true;
                doughnutChartOptions.Plugins.Title!.Text = "Top productos vendidos";
                doughnutChartOptions.Plugins.Title.Display = true;
                await doughnutChart.InitializeAsync(chartData, doughnutChartOptions);
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Se produjo un error al obtener la información de inicio: " + response.Message,
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            PreloadService!.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Se produjo un error al obtener la información de inicio: " + ex.Message,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private IChartDataset GetCharDataSet(List<SoldProductQuantityViewModel> products)
    {
        return new DoughnutChartDataset() { Label = "Ventas", Data = products.Select(p => Convert.ToDouble(p.Quantity)).ToList(), BackgroundColor = GetRandomBackgroundColors(products.Count) };
    }

    private List<string> GetRandomBackgroundColors(int productCount)
    {
        var colors = new List<string>();
        for (var index = 0; index < productCount; index++)
        {
            colors.Add(backgroundColors![index]);
        }

        return colors;
    }
}