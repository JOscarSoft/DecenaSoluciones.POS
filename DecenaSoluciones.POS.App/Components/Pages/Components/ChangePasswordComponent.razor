@using DecenaSoluciones.POS.Shared.Dtos;
@using DecenaSoluciones.POS.Shared.Services;
@using CurrieTechnologies.Razor.SweetAlert2;
@using Microsoft.AspNetCore.Components.Authorization

@inject SweetAlertService Swal;
@inject IAuthService authService;



<RadzenTemplateForm TItem="InnerChangePasswordViewModel" Data=@changePasswordModel Submit=@OnValidSubmit>
    <RadzenStack Gap="1rem" class="rz-p-4 rz-p-md-12">
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" Class="rz-mb-0">@userName</RadzenText>
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenPassword Name="Password" @bind-Value=@changePasswordModel.Password Style="display: block; width: 100%" Placeholder="Nueva contraseña..."/>
                <RadzenRequiredValidator Component="Password" Text="Favor ingresar una contraseña" Style="position: absolute" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenPassword Name="RepeatPassword" @bind-Value=@changePasswordModel.RepeatPassword Style="display: block; width: 100%" Placeholder="Confirmar contraseña..." />
                <RadzenRequiredValidator Component="RepeatPassword" Text="Favor confirmar contraseña" Style="position: absolute" />
                <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(changePasswordModel.RepeatPassword)) Value=@changePasswordModel.Password Component="RepeatPassword" Text="Las contraseñas no coinciden" Style="position: absolute" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow AlignItems="AlignItems.Center" class="rz-mt-4">
            <RadzenColumn Size="12" Offset="0" SizeMD="8" OffsetMD="4">
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Variant="Variant.Flat" Shade="Shade.Darker" ButtonStyle="ButtonStyle.Primary" Text="Confirmar" Style="width: 100%" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Inject] protected PreloadService? PreloadService { get; set; }

    [Parameter] public string userName { get; set; } = "";
    [Parameter] public EventCallback<MouseEventArgs> OnClose { get; set; }

    InnerChangePasswordViewModel changePasswordModel = new InnerChangePasswordViewModel();

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private async Task OnValidSubmit()
    {
        PreloadService!.Show();
        try
        {
            var response = await authService.ChangePassword(new ChangePasswordViewModel
                {
                    Password = changePasswordModel.Password,
                    Username = userName
                });

            PreloadService.Hide();
            if (response.Success)
            {
                changePasswordModel = new InnerChangePasswordViewModel();
                await OnClose.InvokeAsync();

                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Exito",
                        Text = "Contraseña actualizada exitosamente.",
                        Icon = SweetAlertIcon.Success
                    });
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = response.Message.HandleErrorMessage(),
                        Icon = SweetAlertIcon.Error
                    });
            }

        }
        catch (Exception ex)
        {
            PreloadService.Hide();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message.HandleErrorMessage(),
                    Icon = SweetAlertIcon.Error
                });

        }
    }

    class InnerChangePasswordViewModel
    {
        public string Password { get; set; }
        public string RepeatPassword { get; set; }
    }
}
